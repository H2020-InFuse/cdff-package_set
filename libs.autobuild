# this file defiens how packages are build and which build tool and flags are used
# it is evaluated as ruby code

move_package "tools/workflow", "esrocos/tools"
move_package "tools/config", "esrocos/tools"
move_package "types/base", "esrocos/types"
move_package "types/base_support", "esrocos/types"

cmake_package "types/sensor_samples"
cmake_package "types/sensor_samples_support"
move_package "types/sensor_samples", "esrocos/types"
move_package "types/sensor_samples_support", "esrocos/types"

import_package "tools/asn1scc" do |pkg|
   pkg.depends_on "mono"
   pkg.depends_on "mono-numerics"
   pkg.depends_on "mono-system-core"
end


cmake_package "cdff/CDFF" do |pkg|
    pkg.define 'USE_BUNDLED_DEPENDENCIES', 'ON'
    pkg.define 'BUNDLED_DEPENDENCIES_PREFIX', ENV["AUTOPROJ_CURRENT_ROOT"]+"/install"
end

import_package "cdff/external/boost" do |pkg|
    pkg.depends_on "curl"
    pkg.post_install do
        pkg.message "bootstrapping boost"
        Autobuild::Subprocess.run(pkg, 'build', './bootstrap.sh', :working_directory => pkg.srcdir)
        pkg.message "building boost, this may take a while"
        Autobuild::Subprocess.run(pkg, 'build', './b2 install --prefix=' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install', :working_directory => pkg.srcdir)
        pkg.message "boost installed"
        pkg.message "updating FindBoost Module in #{pkg.prefix}/share/cmake-3.11.0-rc4/Modules"
        Autobuild::Subprocess.run(pkg, 'build', 'mkdir -p share/cmake-3.11.0-rc4/Modules', :working_directory => pkg.prefix)
        Autobuild::Subprocess.run(pkg, 'build', 'curl https://gitlab.kitware.com/cmake/cmake/raw/v3.11.0-rc4/Modules/FindBoost.cmake > FindBoost.cmake', :working_directory => pkg.prefix + "/share/cmake-3.11.0-rc4/Modules")
        pkg.message "updated FindBoost Module"
    end
end

cmake_package "cdff/external/opencv" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define 'WITH_FFMPEG','OFF'
    pkg.define 'BUILD_DOCS','OFF'
    pkg.define 'BUILD_EXAMPLES','OFF'
    pkg.define 'BUILD_TESTS','OFF'
    pkg.define 'ENABLE_CXX11','ON'
    pkg.define 'ENABLE_FAST_MATH','ON'
    pkg.define 'WITH_IPP','OFF'
    pkg.define 'WITH_VTK','OFF'
end

cmake_package "cdff/external/cmake"

cmake_package "cdff/external/eigen" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
end

cmake_package "cdff/external/flann" do |pkg|
    pkg.define "CMAKE_BUILD_TYPE","RELEASE"
    pkg.define "BUILD_TESTS","OFF"
    pkg.define "BUILD_EXAMPLES","OFF"
end

cmake_package "cdff/external/qhull" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
end

cmake_package "cdff/external/tinyxml2" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define 'BUILD_TESTS','OFF'
    pkg.define 'BUILD_TESTING','OFF'
end

cmake_package "cdff/external/yaml-cpp" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define "BUILD_SHARED_LIBS","ON"
    pkg.disable_doc # the package has documentation generation target
end

cmake_package "cdff/external/vtk" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define 'BUILD_TESTING','OFF'
    pkg.define 'BUILD_EXAMPLES','OFF'
    pkg.define 'BUILD_DOCUMENTATION','OFF'
end

cmake_package "cdff/external/pcl" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
end

cmake_package "cdff/external/ceres-solver" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'RELEASE'
    pkg.define 'BUILD_SHARED_LIBS', 'ON'
    pkg.define 'BUILD_TESTING', 'OFF'
    pkg.define 'BUILD_EXAMPLES', 'OFF'
end

def python_package(name, relative_setup_location: "", &configure)
    package_common(:import, name) do |pkg|
        pkg.depends_on "python3"
        pkg.post_install do
            pkg.message "installing Python library #{name}"
            if block_given?
                configure.call
            end
            Autobuild::Subprocess.run(
                pkg, "install",
                "python3 setup.py install --prefix ${AUTOPROJ_CURRENT_ROOT}/install",
                :working_directory => pkg.srcdir + "/" + relative_setup_location)
        end
        yield(pkg) if block_given?
    end
end

python_package "cdff/CDFF_dev" do |pkg|
#    Autoproj.message("pkg: #{pkg}")
#TODO: why can pkg be nil?
    unless pkg.nil? ||
    pkg.post_import do
        # write configuration file for CDFF_dev
        cdffpath = File.open(Autoproj.default_find_base_dir + "/cdff/CDFF_dev/cdffpath", "w")
        cdffpath << "../CDFF"
        cdffpath.close
    end
    end
end








