# this file defiens how packages are build and which build tool and flags are used
# it is evaluated as ruby code

move_package "tools/workflow", "esrocos/tools"
move_package "tools/config", "esrocos/tools"
move_package "types/base", "esrocos/types"
move_package "types/base_support", "esrocos/types"

cmake_package "types/sensor_samples"
cmake_package "types/sensor_samples_support"
move_package "types/sensor_samples", "esrocos/types"
move_package "types/sensor_samples_support", "esrocos/types"
cmake_package "types/fused"
move_package "types/fused", "esrocos/types"

cmake_package "tools/msgpack-c"
cmake_package "tools/pocolog2msgpack"

import_package "tools/asn1scc" do |pkg|
   pkg.depends_on "mono"
   pkg.depends_on "mono-numerics"
   pkg.depends_on "mono-system-core"
end


cmake_package "cdff/CDFF" do |pkg|
    pkg.define 'USE_BUNDLED_DEPENDENCIES', 'ON'
    pkg.define 'BUNDLED_DEPENDENCIES_PREFIX', ENV["AUTOPROJ_CURRENT_ROOT"]+"/install"
end

import_package "cdff/external/boost" do |pkg|
    pkg.depends_on "curl"
    pkg.post_install do
        pkg.message "bootstrapping boost"
        Autobuild::Subprocess.run(pkg, 'build', './bootstrap.sh', :working_directory => pkg.srcdir)
        pkg.message "building boost, this may take a while"
        Autobuild::Subprocess.run(pkg, 'build', './b2 install --prefix=' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install', :working_directory => pkg.srcdir)
        pkg.message "boost installed"
        pkg.message "updating FindBoost Module in #{pkg.prefix}/share/cmake-3.11.0-rc4/Modules"
        Autobuild::Subprocess.run(pkg, 'build', 'mkdir -p share/cmake-3.11.0-rc4/Modules', :working_directory => pkg.prefix)
        Autobuild::Subprocess.run(pkg, 'build', 'curl https://gitlab.kitware.com/cmake/cmake/raw/v3.11.0-rc4/Modules/FindBoost.cmake > FindBoost.cmake', :working_directory => pkg.prefix + "/share/cmake-3.11.0-rc4/Modules")
        pkg.message "updated FindBoost Module"
    end
end


import_package "cdff/external/opencv_contrib"
cmake_package "cdff/external/opencv" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define 'WITH_FFMPEG','OFF'
    pkg.define 'BUILD_DOCS','OFF'
    pkg.define 'BUILD_EXAMPLES','OFF'
    pkg.define 'BUILD_TESTS','OFF'
    pkg.define 'ENABLE_CXX11','ON'
    pkg.define 'ENABLE_FAST_MATH','ON'
    pkg.define 'WITH_IPP','OFF'
    pkg.define 'WITH_VTK','OFF'
    pkg.define 'OPENCV_EXTRA_MODULES_PATH', ENV['AUTOPROJ_CURRENT_ROOT']+"/cdff/external/opencv_contrib/modules"
    pkg.define 'BUILD_LIST', 'calib3d,core,dnn,features2d,flann,highgui,imgcodecs,imgproc,ml,objdetect,photo,python2,python3,python_bindings_generator,shape,stitching,superres,ts,video,videoio,videostab,viz,rgbd,ximgproc'
    pkg.define 'CPU_BASELINE', 'SSE3 -D CPU_DISPATCH=SSE4_1,SSE4_2'
end

cmake_package "cdff/external/cmake"

cmake_package "cdff/external/eigen" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
end

cmake_package "cdff/external/flann" do |pkg|
    pkg.define "CMAKE_BUILD_TYPE","RELEASE"
    pkg.define "BUILD_TESTS","OFF"
    pkg.define "BUILD_EXAMPLES","OFF"
end

cmake_package "cdff/external/qhull" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
end

cmake_package "cdff/external/tinyxml2" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define 'BUILD_TESTS','OFF'
    pkg.define 'BUILD_TESTING','OFF'
end

cmake_package "cdff/external/yaml-cpp" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define "BUILD_SHARED_LIBS","ON"
    pkg.disable_doc # the package has documentation generation target
end

cmake_package "cdff/external/vtk" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
    pkg.define 'BUILD_TESTING','OFF'
    pkg.define 'BUILD_EXAMPLES','OFF'
    pkg.define 'BUILD_DOCUMENTATION','OFF'
end

cmake_package "cdff/external/pcl" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE','RELEASE'
end

cmake_package "cdff/external/ceres-solver" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'RELEASE'
    pkg.define 'BUILD_SHARED_LIBS', 'ON'
    pkg.define 'BUILD_TESTING', 'OFF'
    pkg.define 'BUILD_EXAMPLES', 'OFF'
end

cmake_package "cdff/external/nabo" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'SHARED_LIBS', 'ON'
    pkg.define 'USE_OPEN_MP', 'OFF'
    pkg.define 'USE_OPEN_CL', 'OFF'
end

cmake_package "cdff/external/pointmatcher" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'SHARED_LIBS', 'ON'
    pkg.define 'USE_OPEN_MP', 'OFF'
    pkg.define 'USE_OPEN_CL', 'OFF'
    pkg.define 'USE_SYSTEM_YAML_CPP', 'OFF'
    pkg.define 'GENERATE_API_DOC', 'OFF'
end

cmake_package "cdff/external/pangolin" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
end

cmake_package "cdff/external/visp" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'USE_CPP11', 'ON'
	pkg.define 'BUILD_DEMOS', 'OFF'
	pkg.define 'BUILD_TESTS', 'OFF'
    pkg.define 'BUILD_TUTORIALS', 'OFF'
    pkg.define 'BUILD_EXAMPLES', 'OFF'
    pkg.define 'USE_YARP', 'OFF'
    pkg.define 'USE_REALSENSE2', 'ON'
    pkg.define 'USE_PCL', 'ON'
    pkg.define 'BUILD_MODULE_visp_ar', 'ON'
    pkg.define 'BUILD_MODULE_visp_blob', 'OFF'
    pkg.define 'BUILD_MODULE_visp_core', 'ON'
    pkg.define 'BUILD_MODULE_visp_detection', 'ON'
    pkg.define 'BUILD_MODULE_visp_gui', 'ON'
    pkg.define 'BUILD_MODULE_visp_imgproc', 'OFF'
    pkg.define 'BUILD_MODULE_visp_io', 'ON'
    pkg.define 'BUILD_MODULE_visp_klt', 'ON'
    pkg.define 'BUILD_MODULE_visp_mbt', 'ON'
    pkg.define 'BUILD_MODULE_visp_me', 'ON'
    pkg.define 'BUILD_MODULE_visp_robot', 'OFF'
    pkg.define 'BUILD_MODULE_visp_sensor', 'OFF'
    pkg.define 'BUILD_MODULE_visp_tt', 'OFF'
    pkg.define 'BUILD_MODULE_visp_tt_mi', 'OFF'
    pkg.define 'BUILD_MODULE_visp_vision', 'ON'
    pkg.define 'BUILD_MODULE_visp_visual_features', 'ON'
    pkg.define 'BUILD_MODULE_visp_vs', 'OFF'
end

import_package "cdff/external/coin3d" do |pkg|
    pkg.post_install do
        pkg.progress_start "configuring %s" do
            Autobuild::Subprocess.run(pkg, 'build', './configure', "--prefix=#{ENV['AUTOPROJ_CURRENT_ROOT']}", :working_directory => pkg.srcdir)
        end
        pkg.progress_start "building %s" do
            Autobuild::Subprocess.run(pkg, 'build', Autobuild.tool(:make), "-j", :working_directory => pkg.srcdir)
        end
        pkg.progress_start "installing %s" do
            #Autobuild::Subprocess.run(pkg, 'build', Autobuild.tool(:make), "install", :working_directory => pkg.srcdir)
        end
        
    end
end


cmake_package "cdff/external/realsense2" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'BUILD_EXAMPLES', 'FALSE'
end
cmake_package "cdff/external/ogre" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'OGRE_BUILD_SAMPLES', 'ON'
    pkg.define 'OGRE_BUILD_TESTS', 'OFF'
end

cmake_package 'cdff/external/dem_building' do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
end

cmake_package 'cdff/external/gtsam' do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
end

cmake_package 'cdff/external/pom_base' do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
end

cmake_package 'cdff/external/pom_crisp' do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'WITH_ASN1', 'False'
end

cmake_package 'cdff/external/pom_tokamak' do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'WITH_ASN1', 'False'
end

cmake_package 'cdff/external/gdalwrap' do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
end




def subfolder_package(parent_path, build_path ,type = :cmake_package)
    if Gem::Version.new(Autobuild::VERSION) <= Gem::Version.new('1.7.2')
        send(type,build_path) do |pkg|
            pkg.srcdir = parent_path
            pkg.post_import do
                pkg.srcdir = build_path
                Autoproj.manifest.load_package_manifest(pkg.name)
            end
            yield pkg if block_given?
        end
    else
        send(type,build_path) do |pkg|
            pkg.importdir = parent_path
            yield pkg if block_given?
        end
    end
end


subfolder_package "cdff/external/cloudcompare-core", "cdff/external/cloudcompare-core/CC" do |pkg|
    pkg.define 'CMAKE_BUILD_TYPE', 'Release'
    pkg.define 'COMPILE_CC_CORE_LIB_SHARED', 'ON'
    pkg.define 'COMPILE_CC_CORE_LIB_WITH_QT', 'OFF'
    pkg.define 'COMPILE_CC_CORE_LIB_WITH_CGAL', 'OFF'
    pkg.define 'COMPILE_CC_CORE_LIB_WITH_TBB', 'OFF'
    pkg.define 'OPTION_BUILD_CCVIEWER', 'OFF'
end

cmake_package "infuse/asn1_types"
cmake_package "infuse/envire_asn1"
cmake_package "infuse/ASN_Viz"

def configurable_python_package(name, relative_setup_location: "", &configure)
    package_common(:import, name) do |pkg|
        pkg.depends_on "python3"
        pkg.post_install do
            pkg.message "installing Python library #{name}"
            if block_given?
                configure.call
            end
            Autobuild::Subprocess.run(
                pkg, "install",
                "python3 setup.py install --prefix ${AUTOPROJ_CURRENT_ROOT}/install",
                :working_directory => pkg.srcdir + "/" + relative_setup_location)
        end
        yield(pkg) if block_given?
    end
end

configurable_python_package "cdff/CDFF_dev" do |pkg|
#    Autoproj.message("pkg: #{pkg}")
#TODO: why can pkg be nil?
    unless pkg.nil? ||
    pkg.post_import do
        # write configuration file for CDFF_dev
        cdffpath = File.open(Autoproj.default_find_base_dir + "/cdff/CDFF_dev/cdffpath", "w")
        cdffpath << "../CDFF"
        cdffpath.close
    end
    end
end

import_package "infuse/edreswrapper" do |pkg|
    pkg.post_install do
        pkg.message "installing edreswrapper"
        Autobuild::Subprocess.run(pkg, 'build', 'cp -rp  ./include/edres-wrapper ' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install/include', :working_directory => pkg.srcdir)
        Autobuild::Subprocess.run(pkg, 'build', 'cp -rp  ./lib/* ' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install/lib', :working_directory => pkg.srcdir)
        Autobuild::Subprocess.run(pkg, 'build', 'cp -rp  Edres-WrapperConfig.cmake ' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install/share/cmake', :working_directory => pkg.srcdir)
    end
end

import_package "infuse/dlrtracker-core" do |pkg|
    pkg.post_install do
        pkg.message "dlrtracker-core"
        Autobuild::Subprocess.run(pkg, 'build', 'cp -rp  ./include/DLRtracker_core ' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install/include', :working_directory => pkg.srcdir)
        Autobuild::Subprocess.run(pkg, 'build', 'cp -rp  DLRtracker_coreConfig.cmake ' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install/share/cmake', :working_directory => pkg.srcdir)
        Autobuild::Subprocess.run(pkg, 'build', 'ln -s lib/libDLRtracker_core.so.1.0.0 lib/libDLRtracker_core.so.1', :working_directory => pkg.srcdir)
        Autobuild::Subprocess.run(pkg, 'build', 'ln -s lib/libDLRtracker_core.so.1 lib/libDLRtracker_core.so', :working_directory => pkg.srcdir)
        Autobuild::Subprocess.run(pkg, 'build', 'cp -rp  ./lib/* ' + ENV['AUTOPROJ_CURRENT_ROOT'] + '/install/lib/DLRtracker_core', :working_directory => pkg.srcdir)        
    end
end



